definitions:
  # the names of the functions - we use this to generate the code and to register the functions in
  # the javascript class
  ifunction: "js_${generator.prefix}_${class_name}_${func_name}"
  sfunction: "js_${generator.prefix}_${class_name}_${func_name}"
  constructor: "js_${generator.prefix}_${class_name}_constructor"
conversions:
  # some times you want to use a special native type when converting from spidermonkey to native
  # the most common case would be from JS-boolean to bool. Using "bool" will fail here since we
  # pass the address to the conversion method, and a JSBool is defined as an integer in spidermonkey
  native_types:
  # JSBool was removed from Firefox v27
#    bool: "JSBool"
    float: "double"
    short: "int32_t"
    "unsigned char": "uint16_t"
    "char": "int32_t"
    "@std::vector<std::basic_string.*>.>.>": "std::vector<std::string>"
    "@std::vector<int.*>.>": "std::vector<int>"
    "@cocos2d::Map<std::basic_string.*,": "cocos2d::Map<std::string,"
  ns_map:
    "cocos2d::extension::": "cc."
    "cocos2d::ui::": "ccui."
    "cocos2d::": "cc."
    "spine::": "sp."
    "cocostudio::": "ccs."
    "cocosbuilder::": "cc."
    "CocosDenshion::": "cc."
  to_native:
    # jsval to int
    int: "ok &= jsval_to_int32(cx, ${in_value}, (int32_t *)&${out_value})"
    "unsigned int": "ok &= jsval_to_uint32(cx, ${in_value}, &${out_value})"
    "unsigned char": "ok &= jsval_to_uint16(cx, ${in_value}, &${out_value})"
    short: "ok &= jsval_to_int32(cx, ${in_value}, &${out_value})"
    "unsigned short": "ok &= jsval_to_ushort(cx, ${in_value}, &${out_value})"
    char: "ok &= jsval_to_int32(cx, ${in_value}, &${out_value})"
    bool: "${out_value} = JS::ToBoolean(JS::RootedValue(cx, ${in_value}))"
    float: "ok &= JS::ToNumber( cx, JS::RootedValue(cx, ${in_value}), &${out_value})"
    double: "ok &= JS::ToNumber( cx, JS::RootedValue(cx, ${in_value}), &${out_value})"
    long: "ok &= jsval_to_long(cx, ${in_value}, &${out_value})"
    "unsigned long": "ok &= jsval_to_ulong(cx, ${in_value}, &${out_value})"
    "ssize_t": "ok &= jsval_to_ssize(cx, ${in_value}, &${out_value})"
    # jsval has to be a TypedArray, a UInt32Array with 2 elements
    "long long": "ok &= jsval_to_long_long(cx, ${in_value}, &${out_value})"
    "std::string": "ok &= jsval_to_std_string(cx, ${in_value}, &${out_value})"
    "char*": "std::string ${out_value}_tmp; ok &= jsval_to_std_string(cx, ${in_value}, &${out_value}_tmp); ${out_value} = ${out_value}_tmp.c_str()"
    "Point": "ok &= jsval_to_ccpoint(cx, ${in_value}, &${out_value})"
    "Rect": "ok &= jsval_to_ccrect(cx, ${in_value}, &${out_value})"
    "Size": "ok &= jsval_to_ccsize(cx, ${in_value}, &${out_value})"
    "Color4B": "ok &= jsval_to_cccolor4b(cx, ${in_value}, &${out_value})"
    "Color4F": "ok &= jsval_to_cccolor4f(cx, ${in_value}, &${out_value})"
    "Color3B": "ok &= jsval_to_cccolor3b(cx, ${in_value}, &${out_value})"
    "Array*": "ok &= jsval_to_ccarray(cx, ${in_value}, &${out_value})"
    "Dictionary*": "ok &= jsval_to_ccdictionary(cx, ${in_value}, &${out_value})"
    "AffineTransform": "ok &= jsval_to_ccaffinetransform(cx, ${in_value}, &${out_value})"
    "FontDefinition":  "ok &= jsval_to_FontDefinition(cx, ${in_value}, &${out_value})"
    "String*": "std::string ${out_value}_tmp; ok &= jsval_to_std_string(cx, ${in_value}, &${out_value}_tmp); ${out_value} = cocos2d::String::create(${out_value}_tmp)"
    "@Vector<.*>": "ok &= jsval_to_ccvector(cx, ${in_value}, &${out_value})"
    "@Map<std::basic_string.*>": "ok &= jsval_to_ccmap_string_key(cx, ${in_value}, &${out_value})"
    "Value": "ok &= jsval_to_ccvalue(cx, ${in_value}, &${out_value})"
    "ValueMap": "ok &= jsval_to_ccvaluemap(cx, ${in_value}, &${out_value})"
    "ValueMapIntKey": "ok &= jsval_to_ccvaluemapintkey(cx, ${in_value}, &${out_value})"
    "ValueVector": "ok &= jsval_to_ccvaluevector(cx, ${in_value}, &${out_value})"
    "@vector<std::basic_string.*>": "ok &= jsval_to_std_vector_string(cx, ${in_value}, &${out_value})"
    "@vector<int.*>": "ok &= jsval_to_std_vector_int(cx, ${in_value}, &${out_value})"
    "Acceleration": "ok &= jsval_to_ccacceleration(cx, ${in_value}, &${out_value})"
    object: |
      do {
      ${($level + 1) * '\t'}if (!${in_value}.isObject()) { ok = false; break; }
      ${($level + 1) * '\t'}js_proxy_t *jsProxy;
      ${($level + 1) * '\t'}JSObject *tmpObj = JSVAL_TO_OBJECT(${in_value});
      ${($level + 1) * '\t'}jsProxy = jsb_get_js_proxy(tmpObj);
      ${($level + 1) * '\t'}${out_value} = (${ntype})(jsProxy ? jsProxy->ptr : NULL);
      ${($level + 1) * '\t'}JSB_PRECONDITION2( ${out_value}, cx, false, "Invalid Native Object");
      ${($level + 0) * '\t'}} while (0)
    TProductInfo: "ok &= pluginx::jsval_to_TProductInfo(cx, ${in_value}, &${out_value})"
    TIAPDeveloperInfo: "ok &= pluginx::jsval_to_TIAPDeveloperInfo(cx, ${in_value}, &${out_value})"
    TPaymentInfo: "ok &= pluginx::jsval_to_TPaymentInfo(cx, ${in_value}, &${out_value})"
    TAdsDeveloperInfo: "ok &= pluginx::jsval_to_TAdsDeveloperInfo(cx, ${in_value}, &${out_value})"
    TAdsInfo: "ok &= pluginx::jsval_to_TAdsInfo(cx, ${in_value}, &${out_value})"
    TShareDeveloperInfo: "ok &= pluginx::jsval_to_TShareDeveloperInfo(cx, ${in_value}, &${out_value})"
    TShareInfo: "ok &= pluginx::jsval_to_TShareInfo(cx, ${in_value}, &${out_value})"
    TUserDeveloperInfo: "ok &= pluginx::jsval_to_TUserDeveloperInfo(cx, ${in_value}, &${out_value})"
    TSocialDeveloperInfo: "ok &= pluginx::jsval_to_TSocialDeveloperInfo(cx, ${in_value}, &${out_value})"
    TAchievementInfo: "ok &= pluginx::jsval_to_TAchievementInfo(cx, ${in_value}, &${out_value})"
    LogEventParamMap*: |
      cocos2d::plugin::LogEventParamMap ${out_value}_tmp;
      ${($level + 0) * '\t'}do {
      ${($level + 1) * '\t'}ok &= pluginx::jsval_to_LogEventParamMap(cx, ${in_value}, &${out_value});
      ${($level + 1) * '\t'}if (ok) { ${out_value}_tmp = *${out_value}; delete ${out_value}; ${out_value} = &${out_value}_tmp; } else { ${out_value} = NULL; }
      ${($level + 0) * '\t'}} while(0)
    long: "ok &= jsval_to_long(cx, ${in_value}, (long *)&${out_value})"

  from_native:
    # int to jsval
    int: "${out_value} = int32_to_jsval(cx, ${in_value})"
    "unsigned int": "${out_value} = uint32_to_jsval(cx, ${in_value})"
    "unsigned short": "${out_value} = ushort_to_jsval(cx, ${in_value})"
    "unsigned char": "${out_value} = uint32_to_jsval(cx, ${in_value})"
    "long long": "${out_value} = long_long_to_jsval(cx, ${in_value})"
    "std::string": "${out_value} = std_string_to_jsval(cx, ${in_value})"
    "char*": "${out_value} = c_string_to_jsval(cx, ${in_value})"
    bool: "${out_value} = BOOLEAN_TO_JSVAL(${in_value})"
    float: "${out_value} = DOUBLE_TO_JSVAL(${in_value})"
    double: "${out_value} = DOUBLE_TO_JSVAL(${in_value})"
    TProductInfo: "${out_value} = pluginx::TProductInfo_to_jsval(cx, ${in_value})"
    LogEventParamMap*: "${out_value} = pluginx::LogEventParamMap_to_jsval(cx, ${in_value})"
    long: "${out_value} = long_to_jsval(cx, ${in_value})"
    "unsigned long": "${out_value} = ulong_to_jsval(cx, ${in_value})"
    "ssize_t": "${out_value} = ssize_to_jsval(cx, ${in_value})"
    "Point": "${out_value} = ccpoint_to_jsval(cx, ${in_value})"
    "Rect": "${out_value} = ccrect_to_jsval(cx, ${in_value})"
    "Size": "${out_value} = ccsize_to_jsval(cx, ${in_value})"
    "Color4B": "${out_value} = cccolor4b_to_jsval(cx, ${in_value})"
    "Color4F": "${out_value} = cccolor4f_to_jsval(cx, ${in_value})"
    "Color3B": "${out_value} = cccolor3b_to_jsval(cx, ${in_value})"
    "Array*": "${out_value} = ccarray_to_jsval(cx, ${in_value})"
    "Dictionary*": "${out_value} = ccdictionary_to_jsval(cx, ${in_value})"
    "AffineTransform": "${out_value} = ccaffinetransform_to_jsval(cx, ${in_value})"
    "FontDefinition": "${out_value} = FontDefinition_to_jsval(cx, ${in_value})"
    "String*": "${out_value} = std_string_to_jsval(cx, ${in_value}->getCString())"
    "@Vector<.*>": "${out_value} = ccvector_to_jsval(cx, ${in_value})"
    "@Map<std::basic_string.*>": "${out_value} = ccmap_string_key_to_jsval(cx, ${in_value})"
    "Value": "${out_value} = ccvalue_to_jsval(cx, ${in_value})"
    "ValueMap": "${out_value} = ccvaluemap_to_jsval(cx, ${in_value})"
    "ValueMapIntKey": "${out_value} = ccvaluemapintkey_to_jsval(cx, ${in_value})"
    "ValueVector": "${out_value} = ccvaluevector_to_jsval(cx, ${in_value})"
    "@vector<std::basic_string.*>": "${out_value} = ccvector_std_string_to_jsval(cx, ${in_value})"
    "@vector<int.*>": "${out_value} = ccvector_int_to_jsval(cx, ${in_value})"
    "Acceleration*": "${out_value} = ccacceleration_to_jsval(cx, *${in_value})"
    object: |
      do {
      ${($level + 1) * '\t'}if (${in_value}) {
      ${($level + 2) * '\t'}js_proxy_t *jsProxy = js_get_or_create_proxy<${ntype.replace("*", "").replace("const ", "")}>(cx, (${ntype.replace("const ", "")})${in_value});
      ${($level + 2) * '\t'}${out_value} = OBJECT_TO_JSVAL(jsProxy->obj);
      ${($level + 1) * '\t'}} else {
      ${($level + 2) * '\t'}${out_value} = JSVAL_NULL;
      ${($level + 1) * '\t'}}
      ${($level) * '\t'}} while (0)
